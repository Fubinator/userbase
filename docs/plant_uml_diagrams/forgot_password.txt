@startuml
User --> Client: forgotPassword(username)

Client --> Server: forgotPassword(appId, username)

Server --> Client: forgotPasswordToken + encrypted private key + salt

Client --> Server: signed forgotPasswordToken

Server --> Server: Generate temporary password and temp password token \nand store SHA-256(tempPasswordToken)

Server -> User: E-mail containing plaintext temporary password

User --> Client: signIn(username, temporary password)

Client --> Server: getPasswordSalts(appId, username)

Server --> Client: Password salts

Client --> Client: Rebuild temporary password token

Client --> Server: signIn(appId, username, tempPasswordToken)

Server --> Server: Compare SHA-256(tempPasswordToken) to stored\nSHA-256(tempPasswordToken)

Client <- Server: Session ID

Client -> Server: Open WebSocket using Session ID

Client <- Server: Encrypted private keys + salts + validation message

Client -> Client: Use seed to decrypt private keys, sign validation message

Client -> Server: Signed validation message

Client <- Server: Authenticated successfully!

User <- Client: App is ready to use

User -> Client: updateUser(temporary password, new password)

Client -> Client: Rebuild temporary password token

Client -> Server: updateUser(temporary password token, new password)

Server -> Server: Compare SHA-256(tempPasswordToken) to stored\nSHA-256(tempPasswordToken)

Server -> Client: Success!

Client -> User: Password changed successfully!
@enduml
